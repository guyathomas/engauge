import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

export const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Session implements Node {
  id: ID!
  study(where: StudyWhereInput): Study!
  sessionPoints(where: SessionPointWhereInput, orderBy: SessionPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionPoint!]
  ipAddress: String
  participant: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Study implements Node {
  id: ID!
  owner(where: UserWhereInput): User
  imageURL: String!
  shortCode: String!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study!]
  createdAt: DateTime!
  updatedAt: DateTime!
}


#
# Other Types
#

type AggregateSession {
  count: Int!
}

type AggregateSessionPoint {
  count: Int!
}

type AggregateStudy {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createStudy(data: StudyCreateInput!): Study!
  createSession(data: SessionCreateInput!): Session!
  createSessionPoint(data: SessionPointCreateInput!): SessionPoint!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateStudy(data: StudyUpdateInput!, where: StudyWhereUniqueInput!): Study
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  deleteUser(where: UserWhereUniqueInput!): User
  deleteStudy(where: StudyWhereUniqueInput!): Study
  deleteSession(where: SessionWhereUniqueInput!): Session
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertStudy(where: StudyWhereUniqueInput!, create: StudyCreateInput!, update: StudyUpdateInput!): Study!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyStudies(data: StudyUpdateInput!, where: StudyWhereInput!): BatchPayload!
  updateManySessions(data: SessionUpdateInput!, where: SessionWhereInput!): BatchPayload!
  updateManySessionPoints(data: SessionPointUpdateInput!, where: SessionPointWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyStudies(where: StudyWhereInput!): BatchPayload!
  deleteManySessions(where: SessionWhereInput!): BatchPayload!
  deleteManySessionPoints(where: SessionPointWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionPoints(where: SessionPointWhereInput, orderBy: SessionPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionPoint]!
  user(where: UserWhereUniqueInput!): User
  study(where: StudyWhereUniqueInput!): Study
  session(where: SessionWhereUniqueInput!): Session
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  studiesConnection(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudyConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  sessionPointsConnection(where: SessionPointWhereInput, orderBy: SessionPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionPointConnection!
  node(id: ID!): Node
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  ipAddress: String
  participant: String
  study: StudyCreateOneWithoutSessionsInput!
  sessionPoints: SessionPointCreateManyWithoutSessionInput
}

input SessionCreateManyWithoutStudyInput {
  create: [SessionCreateWithoutStudyInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateOneWithoutSessionPointsInput {
  create: SessionCreateWithoutSessionPointsInput
  connect: SessionWhereUniqueInput
}

input SessionCreateWithoutSessionPointsInput {
  ipAddress: String
  participant: String
  study: StudyCreateOneWithoutSessionsInput!
}

input SessionCreateWithoutStudyInput {
  ipAddress: String
  participant: String
  sessionPoints: SessionPointCreateManyWithoutSessionInput
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  ipAddress_ASC
  ipAddress_DESC
  participant_ASC
  participant_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPoint {
  session(where: SessionWhereInput): Session!
  x: Float!
  y: Float!
  createdAt: DateTime!
}

type SessionPointConnection {
  pageInfo: PageInfo!
  edges: [SessionPointEdge]!
  aggregate: AggregateSessionPoint!
}

input SessionPointCreateInput {
  x: Float!
  y: Float!
  session: SessionCreateOneWithoutSessionPointsInput!
}

input SessionPointCreateManyWithoutSessionInput {
  create: [SessionPointCreateWithoutSessionInput!]
}

input SessionPointCreateWithoutSessionInput {
  x: Float!
  y: Float!
}

type SessionPointEdge {
  node: SessionPoint!
  cursor: String!
}

enum SessionPointOrderByInput {
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPointPreviousValues {
  x: Float!
  y: Float!
  createdAt: DateTime!
}

type SessionPointSubscriptionPayload {
  mutation: MutationType!
  node: SessionPoint
  updatedFields: [String!]
  previousValues: SessionPointPreviousValues
}

input SessionPointSubscriptionWhereInput {
  AND: [SessionPointSubscriptionWhereInput!]
  OR: [SessionPointSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionPointWhereInput
}

input SessionPointUpdateInput {
  x: Float
  y: Float
  session: SessionUpdateOneWithoutSessionPointsInput
}

input SessionPointUpdateManyWithoutSessionInput {
  create: [SessionPointCreateWithoutSessionInput!]
}

input SessionPointWhereInput {
  AND: [SessionPointWhereInput!]
  OR: [SessionPointWhereInput!]
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  session: SessionWhereInput
}

type SessionPreviousValues {
  id: ID!
  ipAddress: String
  participant: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  ipAddress: String
  participant: String
  study: StudyUpdateOneWithoutSessionsInput
  sessionPoints: SessionPointUpdateManyWithoutSessionInput
}

input SessionUpdateManyWithoutStudyInput {
  create: [SessionCreateWithoutStudyInput!]
  connect: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithoutStudyInput!]
  upsert: [SessionUpsertWithoutStudyInput!]
}

input SessionUpdateOneWithoutSessionPointsInput {
  create: SessionCreateWithoutSessionPointsInput
  connect: SessionWhereUniqueInput
  disconnect: SessionWhereUniqueInput
  delete: SessionWhereUniqueInput
  update: SessionUpdateWithoutSessionPointsInput
  upsert: SessionUpsertWithoutSessionPointsInput
}

input SessionUpdateWithoutSessionPointsDataInput {
  ipAddress: String
  participant: String
  study: StudyUpdateOneWithoutSessionsInput
}

input SessionUpdateWithoutSessionPointsInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutSessionPointsDataInput!
}

input SessionUpdateWithoutStudyDataInput {
  ipAddress: String
  participant: String
  sessionPoints: SessionPointUpdateManyWithoutSessionInput
}

input SessionUpdateWithoutStudyInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutStudyDataInput!
}

input SessionUpsertWithoutSessionPointsInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutSessionPointsDataInput!
  create: SessionCreateWithoutSessionPointsInput!
}

input SessionUpsertWithoutStudyInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutStudyDataInput!
  create: SessionCreateWithoutStudyInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ipAddress: String
  ipAddress_not: String
  ipAddress_in: [String!]
  ipAddress_not_in: [String!]
  ipAddress_lt: String
  ipAddress_lte: String
  ipAddress_gt: String
  ipAddress_gte: String
  ipAddress_contains: String
  ipAddress_not_contains: String
  ipAddress_starts_with: String
  ipAddress_not_starts_with: String
  ipAddress_ends_with: String
  ipAddress_not_ends_with: String
  participant: String
  participant_not: String
  participant_in: [String!]
  participant_not_in: [String!]
  participant_lt: String
  participant_lte: String
  participant_gt: String
  participant_gte: String
  participant_contains: String
  participant_not_contains: String
  participant_starts_with: String
  participant_not_starts_with: String
  participant_ends_with: String
  participant_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  study: StudyWhereInput
  sessionPoints_every: SessionPointWhereInput
  sessionPoints_some: SessionPointWhereInput
  sessionPoints_none: SessionPointWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

type StudyConnection {
  pageInfo: PageInfo!
  edges: [StudyEdge]!
  aggregate: AggregateStudy!
}

input StudyCreateInput {
  imageURL: String!
  shortCode: String!
  description: String
  owner: UserCreateOneWithoutStudiesInput
  sessions: SessionCreateManyWithoutStudyInput
}

input StudyCreateManyWithoutOwnerInput {
  create: [StudyCreateWithoutOwnerInput!]
  connect: [StudyWhereUniqueInput!]
}

input StudyCreateOneWithoutSessionsInput {
  create: StudyCreateWithoutSessionsInput
  connect: StudyWhereUniqueInput
}

input StudyCreateWithoutOwnerInput {
  imageURL: String!
  shortCode: String!
  description: String
  sessions: SessionCreateManyWithoutStudyInput
}

input StudyCreateWithoutSessionsInput {
  imageURL: String!
  shortCode: String!
  description: String
  owner: UserCreateOneWithoutStudiesInput
}

type StudyEdge {
  node: Study!
  cursor: String!
}

enum StudyOrderByInput {
  id_ASC
  id_DESC
  imageURL_ASC
  imageURL_DESC
  shortCode_ASC
  shortCode_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StudyPreviousValues {
  id: ID!
  imageURL: String!
  shortCode: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StudySubscriptionPayload {
  mutation: MutationType!
  node: Study
  updatedFields: [String!]
  previousValues: StudyPreviousValues
}

input StudySubscriptionWhereInput {
  AND: [StudySubscriptionWhereInput!]
  OR: [StudySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudyWhereInput
}

input StudyUpdateInput {
  imageURL: String
  shortCode: String
  description: String
  owner: UserUpdateOneWithoutStudiesInput
  sessions: SessionUpdateManyWithoutStudyInput
}

input StudyUpdateManyWithoutOwnerInput {
  create: [StudyCreateWithoutOwnerInput!]
  connect: [StudyWhereUniqueInput!]
  disconnect: [StudyWhereUniqueInput!]
  delete: [StudyWhereUniqueInput!]
  update: [StudyUpdateWithoutOwnerInput!]
  upsert: [StudyUpsertWithoutOwnerInput!]
}

input StudyUpdateOneWithoutSessionsInput {
  create: StudyCreateWithoutSessionsInput
  connect: StudyWhereUniqueInput
  disconnect: StudyWhereUniqueInput
  delete: StudyWhereUniqueInput
  update: StudyUpdateWithoutSessionsInput
  upsert: StudyUpsertWithoutSessionsInput
}

input StudyUpdateWithoutOwnerDataInput {
  imageURL: String
  shortCode: String
  description: String
  sessions: SessionUpdateManyWithoutStudyInput
}

input StudyUpdateWithoutOwnerInput {
  where: StudyWhereUniqueInput!
  data: StudyUpdateWithoutOwnerDataInput!
}

input StudyUpdateWithoutSessionsDataInput {
  imageURL: String
  shortCode: String
  description: String
  owner: UserUpdateOneWithoutStudiesInput
}

input StudyUpdateWithoutSessionsInput {
  where: StudyWhereUniqueInput!
  data: StudyUpdateWithoutSessionsDataInput!
}

input StudyUpsertWithoutOwnerInput {
  where: StudyWhereUniqueInput!
  update: StudyUpdateWithoutOwnerDataInput!
  create: StudyCreateWithoutOwnerInput!
}

input StudyUpsertWithoutSessionsInput {
  where: StudyWhereUniqueInput!
  update: StudyUpdateWithoutSessionsDataInput!
  create: StudyCreateWithoutSessionsInput!
}

input StudyWhereInput {
  AND: [StudyWhereInput!]
  OR: [StudyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageURL: String
  imageURL_not: String
  imageURL_in: [String!]
  imageURL_not_in: [String!]
  imageURL_lt: String
  imageURL_lte: String
  imageURL_gt: String
  imageURL_gte: String
  imageURL_contains: String
  imageURL_not_contains: String
  imageURL_starts_with: String
  imageURL_not_starts_with: String
  imageURL_ends_with: String
  imageURL_not_ends_with: String
  shortCode: String
  shortCode_not: String
  shortCode_in: [String!]
  shortCode_not_in: [String!]
  shortCode_lt: String
  shortCode_lte: String
  shortCode_gt: String
  shortCode_gte: String
  shortCode_contains: String
  shortCode_not_contains: String
  shortCode_starts_with: String
  shortCode_not_starts_with: String
  shortCode_ends_with: String
  shortCode_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: UserWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
}

input StudyWhereUniqueInput {
  id: ID
  shortCode: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  study(where: StudySubscriptionWhereInput): StudySubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  sessionPoint(where: SessionPointSubscriptionWhereInput): SessionPointSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  studies: StudyCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutStudiesInput {
  create: UserCreateWithoutStudiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStudiesInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  studies: StudyUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutStudiesInput {
  create: UserCreateWithoutStudiesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutStudiesInput
  upsert: UserUpsertWithoutStudiesInput
}

input UserUpdateWithoutStudiesDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutStudiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudiesDataInput!
}

input UserUpsertWithoutStudiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudiesDataInput!
  create: UserCreateWithoutStudiesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  studies_every: StudyWhereInput
  studies_some: StudyWhereInput
  studies_none: StudyWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC' |
  'name_ASC' |
  'name_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type StudyOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'imageURL_ASC' |
  'imageURL_DESC' |
  'shortCode_ASC' |
  'shortCode_DESC' |
  'description_ASC' |
  'description_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type SessionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'ipAddress_ASC' |
  'ipAddress_DESC' |
  'participant_ASC' |
  'participant_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type SessionPointOrderByInput = 
  'x_ASC' |
  'x_DESC' |
  'y_ASC' |
  'y_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface SessionCreateInput {
  ipAddress?: String
  participant?: String
  study: StudyCreateOneWithoutSessionsInput
  sessionPoints?: SessionPointCreateManyWithoutSessionInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  studies_every?: StudyWhereInput
  studies_some?: StudyWhereInput
  studies_none?: StudyWhereInput
}

export interface StudyUpdateInput {
  imageURL?: String
  shortCode?: String
  description?: String
  owner?: UserUpdateOneWithoutStudiesInput
  sessions?: SessionUpdateManyWithoutStudyInput
}

export interface SessionPointUpdateManyWithoutSessionInput {
  create?: SessionPointCreateWithoutSessionInput[] | SessionPointCreateWithoutSessionInput
}

export interface StudyUpsertWithoutOwnerInput {
  where: StudyWhereUniqueInput
  update: StudyUpdateWithoutOwnerDataInput
  create: StudyCreateWithoutOwnerInput
}

export interface SessionCreateOneWithoutSessionPointsInput {
  create?: SessionCreateWithoutSessionPointsInput
  connect?: SessionWhereUniqueInput
}

export interface UserCreateInput {
  email: String
  password: String
  name: String
  studies?: StudyCreateManyWithoutOwnerInput
}

export interface SessionSubscriptionWhereInput {
  AND?: SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput
  OR?: SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: SessionWhereInput
}

export interface StudyCreateManyWithoutOwnerInput {
  create?: StudyCreateWithoutOwnerInput[] | StudyCreateWithoutOwnerInput
  connect?: StudyWhereUniqueInput[] | StudyWhereUniqueInput
}

export interface SessionWhereInput {
  AND?: SessionWhereInput[] | SessionWhereInput
  OR?: SessionWhereInput[] | SessionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  ipAddress?: String
  ipAddress_not?: String
  ipAddress_in?: String[] | String
  ipAddress_not_in?: String[] | String
  ipAddress_lt?: String
  ipAddress_lte?: String
  ipAddress_gt?: String
  ipAddress_gte?: String
  ipAddress_contains?: String
  ipAddress_not_contains?: String
  ipAddress_starts_with?: String
  ipAddress_not_starts_with?: String
  ipAddress_ends_with?: String
  ipAddress_not_ends_with?: String
  participant?: String
  participant_not?: String
  participant_in?: String[] | String
  participant_not_in?: String[] | String
  participant_lt?: String
  participant_lte?: String
  participant_gt?: String
  participant_gte?: String
  participant_contains?: String
  participant_not_contains?: String
  participant_starts_with?: String
  participant_not_starts_with?: String
  participant_ends_with?: String
  participant_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  study?: StudyWhereInput
  sessionPoints_every?: SessionPointWhereInput
  sessionPoints_some?: SessionPointWhereInput
  sessionPoints_none?: SessionPointWhereInput
}

export interface StudyCreateWithoutOwnerInput {
  imageURL: String
  shortCode: String
  description?: String
  sessions?: SessionCreateManyWithoutStudyInput
}

export interface StudyWhereInput {
  AND?: StudyWhereInput[] | StudyWhereInput
  OR?: StudyWhereInput[] | StudyWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  imageURL?: String
  imageURL_not?: String
  imageURL_in?: String[] | String
  imageURL_not_in?: String[] | String
  imageURL_lt?: String
  imageURL_lte?: String
  imageURL_gt?: String
  imageURL_gte?: String
  imageURL_contains?: String
  imageURL_not_contains?: String
  imageURL_starts_with?: String
  imageURL_not_starts_with?: String
  imageURL_ends_with?: String
  imageURL_not_ends_with?: String
  shortCode?: String
  shortCode_not?: String
  shortCode_in?: String[] | String
  shortCode_not_in?: String[] | String
  shortCode_lt?: String
  shortCode_lte?: String
  shortCode_gt?: String
  shortCode_gte?: String
  shortCode_contains?: String
  shortCode_not_contains?: String
  shortCode_starts_with?: String
  shortCode_not_starts_with?: String
  shortCode_ends_with?: String
  shortCode_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  owner?: UserWhereInput
  sessions_every?: SessionWhereInput
  sessions_some?: SessionWhereInput
  sessions_none?: SessionWhereInput
}

export interface SessionCreateManyWithoutStudyInput {
  create?: SessionCreateWithoutStudyInput[] | SessionCreateWithoutStudyInput
  connect?: SessionWhereUniqueInput[] | SessionWhereUniqueInput
}

export interface SessionUpsertWithoutSessionPointsInput {
  where: SessionWhereUniqueInput
  update: SessionUpdateWithoutSessionPointsDataInput
  create: SessionCreateWithoutSessionPointsInput
}

export interface SessionCreateWithoutStudyInput {
  ipAddress?: String
  participant?: String
  sessionPoints?: SessionPointCreateManyWithoutSessionInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
}

export interface SessionPointCreateManyWithoutSessionInput {
  create?: SessionPointCreateWithoutSessionInput[] | SessionPointCreateWithoutSessionInput
}

export interface SessionWhereUniqueInput {
  id?: ID_Input
}

export interface SessionPointCreateWithoutSessionInput {
  x: Float
  y: Float
}

export interface SessionUpdateOneWithoutSessionPointsInput {
  create?: SessionCreateWithoutSessionPointsInput
  connect?: SessionWhereUniqueInput
  disconnect?: SessionWhereUniqueInput
  delete?: SessionWhereUniqueInput
  update?: SessionUpdateWithoutSessionPointsInput
  upsert?: SessionUpsertWithoutSessionPointsInput
}

export interface StudyCreateInput {
  imageURL: String
  shortCode: String
  description?: String
  owner?: UserCreateOneWithoutStudiesInput
  sessions?: SessionCreateManyWithoutStudyInput
}

export interface StudyUpsertWithoutSessionsInput {
  where: StudyWhereUniqueInput
  update: StudyUpdateWithoutSessionsDataInput
  create: StudyCreateWithoutSessionsInput
}

export interface UserCreateOneWithoutStudiesInput {
  create?: UserCreateWithoutStudiesInput
  connect?: UserWhereUniqueInput
}

export interface StudyUpdateWithoutSessionsInput {
  where: StudyWhereUniqueInput
  data: StudyUpdateWithoutSessionsDataInput
}

export interface UserCreateWithoutStudiesInput {
  email: String
  password: String
  name: String
}

export interface SessionUpdateInput {
  ipAddress?: String
  participant?: String
  study?: StudyUpdateOneWithoutSessionsInput
  sessionPoints?: SessionPointUpdateManyWithoutSessionInput
}

export interface SessionUpsertWithoutStudyInput {
  where: SessionWhereUniqueInput
  update: SessionUpdateWithoutStudyDataInput
  create: SessionCreateWithoutStudyInput
}

export interface UserUpdateWithoutStudiesDataInput {
  email?: String
  password?: String
  name?: String
}

export interface StudyCreateOneWithoutSessionsInput {
  create?: StudyCreateWithoutSessionsInput
  connect?: StudyWhereUniqueInput
}

export interface UserUpdateOneWithoutStudiesInput {
  create?: UserCreateWithoutStudiesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutStudiesInput
  upsert?: UserUpsertWithoutStudiesInput
}

export interface StudyCreateWithoutSessionsInput {
  imageURL: String
  shortCode: String
  description?: String
  owner?: UserCreateOneWithoutStudiesInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface SessionPointCreateInput {
  x: Float
  y: Float
  session: SessionCreateOneWithoutSessionPointsInput
}

export interface StudyWhereUniqueInput {
  id?: ID_Input
  shortCode?: String
}

export interface SessionPointWhereInput {
  AND?: SessionPointWhereInput[] | SessionPointWhereInput
  OR?: SessionPointWhereInput[] | SessionPointWhereInput
  x?: Float
  x_not?: Float
  x_in?: Float[] | Float
  x_not_in?: Float[] | Float
  x_lt?: Float
  x_lte?: Float
  x_gt?: Float
  x_gte?: Float
  y?: Float
  y_not?: Float
  y_in?: Float[] | Float
  y_not_in?: Float[] | Float
  y_lt?: Float
  y_lte?: Float
  y_gt?: Float
  y_gte?: Float
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  session?: SessionWhereInput
}

export interface SessionPointUpdateInput {
  x?: Float
  y?: Float
  session?: SessionUpdateOneWithoutSessionPointsInput
}

export interface SessionCreateWithoutSessionPointsInput {
  ipAddress?: String
  participant?: String
  study: StudyCreateOneWithoutSessionsInput
}

export interface StudyUpdateOneWithoutSessionsInput {
  create?: StudyCreateWithoutSessionsInput
  connect?: StudyWhereUniqueInput
  disconnect?: StudyWhereUniqueInput
  delete?: StudyWhereUniqueInput
  update?: StudyUpdateWithoutSessionsInput
  upsert?: StudyUpsertWithoutSessionsInput
}

export interface UserUpdateInput {
  email?: String
  password?: String
  name?: String
  studies?: StudyUpdateManyWithoutOwnerInput
}

export interface UserUpdateWithoutStudiesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutStudiesDataInput
}

export interface StudyUpdateManyWithoutOwnerInput {
  create?: StudyCreateWithoutOwnerInput[] | StudyCreateWithoutOwnerInput
  connect?: StudyWhereUniqueInput[] | StudyWhereUniqueInput
  disconnect?: StudyWhereUniqueInput[] | StudyWhereUniqueInput
  delete?: StudyWhereUniqueInput[] | StudyWhereUniqueInput
  update?: StudyUpdateWithoutOwnerInput[] | StudyUpdateWithoutOwnerInput
  upsert?: StudyUpsertWithoutOwnerInput[] | StudyUpsertWithoutOwnerInput
}

export interface StudySubscriptionWhereInput {
  AND?: StudySubscriptionWhereInput[] | StudySubscriptionWhereInput
  OR?: StudySubscriptionWhereInput[] | StudySubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: StudyWhereInput
}

export interface StudyUpdateWithoutOwnerInput {
  where: StudyWhereUniqueInput
  data: StudyUpdateWithoutOwnerDataInput
}

export interface SessionUpdateWithoutSessionPointsInput {
  where: SessionWhereUniqueInput
  data: SessionUpdateWithoutSessionPointsDataInput
}

export interface SessionUpdateWithoutStudyDataInput {
  ipAddress?: String
  participant?: String
  sessionPoints?: SessionPointUpdateManyWithoutSessionInput
}

export interface SessionUpdateWithoutStudyInput {
  where: SessionWhereUniqueInput
  data: SessionUpdateWithoutStudyDataInput
}

export interface SessionUpdateManyWithoutStudyInput {
  create?: SessionCreateWithoutStudyInput[] | SessionCreateWithoutStudyInput
  connect?: SessionWhereUniqueInput[] | SessionWhereUniqueInput
  disconnect?: SessionWhereUniqueInput[] | SessionWhereUniqueInput
  delete?: SessionWhereUniqueInput[] | SessionWhereUniqueInput
  update?: SessionUpdateWithoutStudyInput[] | SessionUpdateWithoutStudyInput
  upsert?: SessionUpsertWithoutStudyInput[] | SessionUpsertWithoutStudyInput
}

export interface StudyUpdateWithoutOwnerDataInput {
  imageURL?: String
  shortCode?: String
  description?: String
  sessions?: SessionUpdateManyWithoutStudyInput
}

export interface StudyUpdateWithoutSessionsDataInput {
  imageURL?: String
  shortCode?: String
  description?: String
  owner?: UserUpdateOneWithoutStudiesInput
}

export interface SessionUpdateWithoutSessionPointsDataInput {
  ipAddress?: String
  participant?: String
  study?: StudyUpdateOneWithoutSessionsInput
}

export interface SessionPointSubscriptionWhereInput {
  AND?: SessionPointSubscriptionWhereInput[] | SessionPointSubscriptionWhereInput
  OR?: SessionPointSubscriptionWhereInput[] | SessionPointSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: SessionPointWhereInput
}

export interface UserUpsertWithoutStudiesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutStudiesDataInput
  create: UserCreateWithoutStudiesInput
}

export interface Node {
  id: ID_Output
}

export interface SessionPointPreviousValues {
  x: Float
  y: Float
  createdAt: DateTime
}

export interface SessionPointSubscriptionPayload {
  mutation: MutationType
  node?: SessionPoint
  updatedFields?: String[]
  previousValues?: SessionPointPreviousValues
}

export interface StudyPreviousValues {
  id: ID_Output
  imageURL: String
  shortCode: String
  description?: String
  createdAt: DateTime
  updatedAt: DateTime
}

export interface SessionPreviousValues {
  id: ID_Output
  ipAddress?: String
  participant?: String
  createdAt: DateTime
  updatedAt: DateTime
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface SessionPointConnection {
  pageInfo: PageInfo
  edges: SessionPointEdge[]
  aggregate: AggregateSessionPoint
}

export interface AggregateSessionPoint {
  count: Int
}

export interface SessionEdge {
  node: Session
  cursor: String
}

export interface SessionPoint {
  session: Session
  x: Float
  y: Float
  createdAt: DateTime
}

export interface AggregateStudy {
  count: Int
}

export interface SessionSubscriptionPayload {
  mutation: MutationType
  node?: Session
  updatedFields?: String[]
  previousValues?: SessionPreviousValues
}

export interface StudyConnection {
  pageInfo: PageInfo
  edges: StudyEdge[]
  aggregate: AggregateStudy
}

export interface Session extends Node {
  id: ID_Output
  study: Study
  sessionPoints?: SessionPoint[]
  ipAddress?: String
  participant?: String
  createdAt: DateTime
  updatedAt: DateTime
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface User extends Node {
  id: ID_Output
  email: String
  password: String
  name: String
  studies?: Study[]
  createdAt: DateTime
  updatedAt: DateTime
}

export interface SessionPointEdge {
  node: SessionPoint
  cursor: String
}

export interface SessionConnection {
  pageInfo: PageInfo
  edges: SessionEdge[]
  aggregate: AggregateSession
}

export interface StudySubscriptionPayload {
  mutation: MutationType
  node?: Study
  updatedFields?: String[]
  previousValues?: StudyPreviousValues
}

export interface Study extends Node {
  id: ID_Output
  owner?: User
  imageURL: String
  shortCode: String
  sessions?: Session[]
  description?: String
  createdAt: DateTime
  updatedAt: DateTime
}

export interface UserPreviousValues {
  id: ID_Output
  email: String
  password: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface StudyEdge {
  node: Study
  cursor: String
}

export interface AggregateSession {
  count: Int
}

export interface BatchPayload {
  count: Long
}

export interface AggregateUser {
  count: Int
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

export type Long = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type DateTime = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  studies: (args: { where?: StudyWhereInput, orderBy?: StudyOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Study[]>
  sessions: (args: { where?: SessionWhereInput, orderBy?: SessionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Session[]>
  sessionPoints: (args: { where?: SessionPointWhereInput, orderBy?: SessionPointOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SessionPoint[]>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  study: (args: { where: StudyWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Study | null>
  session: (args: { where: SessionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Session | null>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  studiesConnection: (args: { where?: StudyWhereInput, orderBy?: StudyOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<StudyConnection>
  sessionsConnection: (args: { where?: SessionWhereInput, orderBy?: SessionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SessionConnection>
  sessionPointsConnection: (args: { where?: SessionPointWhereInput, orderBy?: SessionPointOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SessionPointConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createStudy: (args: { data: StudyCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Study>
  createSession: (args: { data: SessionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Session>
  createSessionPoint: (args: { data: SessionPointCreateInput }, info?: GraphQLResolveInfo | string) => Promise<SessionPoint>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateStudy: (args: { data: StudyUpdateInput, where: StudyWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Study | null>
  updateSession: (args: { data: SessionUpdateInput, where: SessionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Session | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteStudy: (args: { where: StudyWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Study | null>
  deleteSession: (args: { where: SessionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Session | null>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertStudy: (args: { where: StudyWhereUniqueInput, create: StudyCreateInput, update: StudyUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Study>
  upsertSession: (args: { where: SessionWhereUniqueInput, create: SessionCreateInput, update: SessionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Session>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyStudies: (args: { data: StudyUpdateInput, where: StudyWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManySessions: (args: { data: SessionUpdateInput, where: SessionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManySessionPoints: (args: { data: SessionPointUpdateInput, where: SessionPointWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyStudies: (args: { where: StudyWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManySessions: (args: { where: SessionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManySessionPoints: (args: { where: SessionPointWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  study: (args: { where?: StudySubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<StudySubscriptionPayload>>
  session: (args: { where?: SessionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<SessionSubscriptionPayload>>
  sessionPoint: (args: { where?: SessionPointSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<SessionPointSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Study: (where: StudyWhereInput): Promise<boolean> => super.existsDelegate('query', 'studies', { where }, {}, '{ id }'),
    Session: (where: SessionWhereInput): Promise<boolean> => super.existsDelegate('query', 'sessions', { where }, {}, '{ id }'),
    SessionPoint: (where: SessionPointWhereInput): Promise<boolean> => super.existsDelegate('query', 'sessionPoints', { where }, {}, '{ id }')
  }

  query: Query = {
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    studies: (args, info): Promise<Study[]> => super.delegate('query', 'studies', args, {}, info),
    sessions: (args, info): Promise<Session[]> => super.delegate('query', 'sessions', args, {}, info),
    sessionPoints: (args, info): Promise<SessionPoint[]> => super.delegate('query', 'sessionPoints', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    study: (args, info): Promise<Study | null> => super.delegate('query', 'study', args, {}, info),
    session: (args, info): Promise<Session | null> => super.delegate('query', 'session', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    studiesConnection: (args, info): Promise<StudyConnection> => super.delegate('query', 'studiesConnection', args, {}, info),
    sessionsConnection: (args, info): Promise<SessionConnection> => super.delegate('query', 'sessionsConnection', args, {}, info),
    sessionPointsConnection: (args, info): Promise<SessionPointConnection> => super.delegate('query', 'sessionPointsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createStudy: (args, info): Promise<Study> => super.delegate('mutation', 'createStudy', args, {}, info),
    createSession: (args, info): Promise<Session> => super.delegate('mutation', 'createSession', args, {}, info),
    createSessionPoint: (args, info): Promise<SessionPoint> => super.delegate('mutation', 'createSessionPoint', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateStudy: (args, info): Promise<Study | null> => super.delegate('mutation', 'updateStudy', args, {}, info),
    updateSession: (args, info): Promise<Session | null> => super.delegate('mutation', 'updateSession', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteStudy: (args, info): Promise<Study | null> => super.delegate('mutation', 'deleteStudy', args, {}, info),
    deleteSession: (args, info): Promise<Session | null> => super.delegate('mutation', 'deleteSession', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertStudy: (args, info): Promise<Study> => super.delegate('mutation', 'upsertStudy', args, {}, info),
    upsertSession: (args, info): Promise<Session> => super.delegate('mutation', 'upsertSession', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyStudies: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyStudies', args, {}, info),
    updateManySessions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManySessions', args, {}, info),
    updateManySessionPoints: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManySessionPoints', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyStudies: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyStudies', args, {}, info),
    deleteManySessions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManySessions', args, {}, info),
    deleteManySessionPoints: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManySessionPoints', args, {}, info)
  }

  subscription: Subscription = {
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    study: (args, infoOrQuery): Promise<AsyncIterator<StudySubscriptionPayload>> => super.delegateSubscription('study', args, {}, infoOrQuery),
    session: (args, infoOrQuery): Promise<AsyncIterator<SessionSubscriptionPayload>> => super.delegateSubscription('session', args, {}, infoOrQuery),
    sessionPoint: (args, infoOrQuery): Promise<AsyncIterator<SessionPointSubscriptionPayload>> => super.delegateSubscription('sessionPoint', args, {}, infoOrQuery)
  }
}