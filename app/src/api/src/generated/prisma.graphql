# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Session implements Node {
  id: ID!
  study(where: StudyWhereInput): Study!
  sessionPoints(where: SessionPointWhereInput, orderBy: SessionPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionPoint!]
  ipAddress: String
  participant: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Study implements Node {
  id: ID!
  owner(where: UserWhereInput): User
  imageURL: String!
  shortCode: String!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study!]
  createdAt: DateTime!
  updatedAt: DateTime!
}


#
# Other Types
#

type AggregateSession {
  count: Int!
}

type AggregateSessionPoint {
  count: Int!
}

type AggregateStudy {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createStudy(data: StudyCreateInput!): Study!
  createSession(data: SessionCreateInput!): Session!
  createSessionPoint(data: SessionPointCreateInput!): SessionPoint!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateStudy(data: StudyUpdateInput!, where: StudyWhereUniqueInput!): Study
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  deleteUser(where: UserWhereUniqueInput!): User
  deleteStudy(where: StudyWhereUniqueInput!): Study
  deleteSession(where: SessionWhereUniqueInput!): Session
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertStudy(where: StudyWhereUniqueInput!, create: StudyCreateInput!, update: StudyUpdateInput!): Study!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyStudies(data: StudyUpdateInput!, where: StudyWhereInput!): BatchPayload!
  updateManySessions(data: SessionUpdateInput!, where: SessionWhereInput!): BatchPayload!
  updateManySessionPoints(data: SessionPointUpdateInput!, where: SessionPointWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyStudies(where: StudyWhereInput!): BatchPayload!
  deleteManySessions(where: SessionWhereInput!): BatchPayload!
  deleteManySessionPoints(where: SessionPointWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionPoints(where: SessionPointWhereInput, orderBy: SessionPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionPoint]!
  user(where: UserWhereUniqueInput!): User
  study(where: StudyWhereUniqueInput!): Study
  session(where: SessionWhereUniqueInput!): Session
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  studiesConnection(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudyConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  sessionPointsConnection(where: SessionPointWhereInput, orderBy: SessionPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionPointConnection!
  node(id: ID!): Node
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  ipAddress: String
  participant: String
  study: StudyCreateOneWithoutSessionsInput!
  sessionPoints: SessionPointCreateManyWithoutSessionInput
}

input SessionCreateManyWithoutStudyInput {
  create: [SessionCreateWithoutStudyInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateOneWithoutSessionPointsInput {
  create: SessionCreateWithoutSessionPointsInput
  connect: SessionWhereUniqueInput
}

input SessionCreateWithoutSessionPointsInput {
  ipAddress: String
  participant: String
  study: StudyCreateOneWithoutSessionsInput!
}

input SessionCreateWithoutStudyInput {
  ipAddress: String
  participant: String
  sessionPoints: SessionPointCreateManyWithoutSessionInput
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  ipAddress_ASC
  ipAddress_DESC
  participant_ASC
  participant_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPoint {
  session(where: SessionWhereInput): Session!
  x: Float!
  y: Float!
  createdAt: DateTime!
}

type SessionPointConnection {
  pageInfo: PageInfo!
  edges: [SessionPointEdge]!
  aggregate: AggregateSessionPoint!
}

input SessionPointCreateInput {
  x: Float!
  y: Float!
  session: SessionCreateOneWithoutSessionPointsInput!
}

input SessionPointCreateManyWithoutSessionInput {
  create: [SessionPointCreateWithoutSessionInput!]
}

input SessionPointCreateWithoutSessionInput {
  x: Float!
  y: Float!
}

type SessionPointEdge {
  node: SessionPoint!
  cursor: String!
}

enum SessionPointOrderByInput {
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPointPreviousValues {
  x: Float!
  y: Float!
  createdAt: DateTime!
}

type SessionPointSubscriptionPayload {
  mutation: MutationType!
  node: SessionPoint
  updatedFields: [String!]
  previousValues: SessionPointPreviousValues
}

input SessionPointSubscriptionWhereInput {
  AND: [SessionPointSubscriptionWhereInput!]
  OR: [SessionPointSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionPointWhereInput
}

input SessionPointUpdateInput {
  x: Float
  y: Float
  session: SessionUpdateOneWithoutSessionPointsInput
}

input SessionPointUpdateManyWithoutSessionInput {
  create: [SessionPointCreateWithoutSessionInput!]
}

input SessionPointWhereInput {
  AND: [SessionPointWhereInput!]
  OR: [SessionPointWhereInput!]
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  session: SessionWhereInput
}

type SessionPreviousValues {
  id: ID!
  ipAddress: String
  participant: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  ipAddress: String
  participant: String
  study: StudyUpdateOneWithoutSessionsInput
  sessionPoints: SessionPointUpdateManyWithoutSessionInput
}

input SessionUpdateManyWithoutStudyInput {
  create: [SessionCreateWithoutStudyInput!]
  connect: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithoutStudyInput!]
  upsert: [SessionUpsertWithoutStudyInput!]
}

input SessionUpdateOneWithoutSessionPointsInput {
  create: SessionCreateWithoutSessionPointsInput
  connect: SessionWhereUniqueInput
  disconnect: SessionWhereUniqueInput
  delete: SessionWhereUniqueInput
  update: SessionUpdateWithoutSessionPointsInput
  upsert: SessionUpsertWithoutSessionPointsInput
}

input SessionUpdateWithoutSessionPointsDataInput {
  ipAddress: String
  participant: String
  study: StudyUpdateOneWithoutSessionsInput
}

input SessionUpdateWithoutSessionPointsInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutSessionPointsDataInput!
}

input SessionUpdateWithoutStudyDataInput {
  ipAddress: String
  participant: String
  sessionPoints: SessionPointUpdateManyWithoutSessionInput
}

input SessionUpdateWithoutStudyInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutStudyDataInput!
}

input SessionUpsertWithoutSessionPointsInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutSessionPointsDataInput!
  create: SessionCreateWithoutSessionPointsInput!
}

input SessionUpsertWithoutStudyInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutStudyDataInput!
  create: SessionCreateWithoutStudyInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ipAddress: String
  ipAddress_not: String
  ipAddress_in: [String!]
  ipAddress_not_in: [String!]
  ipAddress_lt: String
  ipAddress_lte: String
  ipAddress_gt: String
  ipAddress_gte: String
  ipAddress_contains: String
  ipAddress_not_contains: String
  ipAddress_starts_with: String
  ipAddress_not_starts_with: String
  ipAddress_ends_with: String
  ipAddress_not_ends_with: String
  participant: String
  participant_not: String
  participant_in: [String!]
  participant_not_in: [String!]
  participant_lt: String
  participant_lte: String
  participant_gt: String
  participant_gte: String
  participant_contains: String
  participant_not_contains: String
  participant_starts_with: String
  participant_not_starts_with: String
  participant_ends_with: String
  participant_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  study: StudyWhereInput
  sessionPoints_every: SessionPointWhereInput
  sessionPoints_some: SessionPointWhereInput
  sessionPoints_none: SessionPointWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

type StudyConnection {
  pageInfo: PageInfo!
  edges: [StudyEdge]!
  aggregate: AggregateStudy!
}

input StudyCreateInput {
  imageURL: String!
  shortCode: String!
  description: String
  owner: UserCreateOneWithoutStudiesInput
  sessions: SessionCreateManyWithoutStudyInput
}

input StudyCreateManyWithoutOwnerInput {
  create: [StudyCreateWithoutOwnerInput!]
  connect: [StudyWhereUniqueInput!]
}

input StudyCreateOneWithoutSessionsInput {
  create: StudyCreateWithoutSessionsInput
  connect: StudyWhereUniqueInput
}

input StudyCreateWithoutOwnerInput {
  imageURL: String!
  shortCode: String!
  description: String
  sessions: SessionCreateManyWithoutStudyInput
}

input StudyCreateWithoutSessionsInput {
  imageURL: String!
  shortCode: String!
  description: String
  owner: UserCreateOneWithoutStudiesInput
}

type StudyEdge {
  node: Study!
  cursor: String!
}

enum StudyOrderByInput {
  id_ASC
  id_DESC
  imageURL_ASC
  imageURL_DESC
  shortCode_ASC
  shortCode_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StudyPreviousValues {
  id: ID!
  imageURL: String!
  shortCode: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StudySubscriptionPayload {
  mutation: MutationType!
  node: Study
  updatedFields: [String!]
  previousValues: StudyPreviousValues
}

input StudySubscriptionWhereInput {
  AND: [StudySubscriptionWhereInput!]
  OR: [StudySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudyWhereInput
}

input StudyUpdateInput {
  imageURL: String
  shortCode: String
  description: String
  owner: UserUpdateOneWithoutStudiesInput
  sessions: SessionUpdateManyWithoutStudyInput
}

input StudyUpdateManyWithoutOwnerInput {
  create: [StudyCreateWithoutOwnerInput!]
  connect: [StudyWhereUniqueInput!]
  disconnect: [StudyWhereUniqueInput!]
  delete: [StudyWhereUniqueInput!]
  update: [StudyUpdateWithoutOwnerInput!]
  upsert: [StudyUpsertWithoutOwnerInput!]
}

input StudyUpdateOneWithoutSessionsInput {
  create: StudyCreateWithoutSessionsInput
  connect: StudyWhereUniqueInput
  disconnect: StudyWhereUniqueInput
  delete: StudyWhereUniqueInput
  update: StudyUpdateWithoutSessionsInput
  upsert: StudyUpsertWithoutSessionsInput
}

input StudyUpdateWithoutOwnerDataInput {
  imageURL: String
  shortCode: String
  description: String
  sessions: SessionUpdateManyWithoutStudyInput
}

input StudyUpdateWithoutOwnerInput {
  where: StudyWhereUniqueInput!
  data: StudyUpdateWithoutOwnerDataInput!
}

input StudyUpdateWithoutSessionsDataInput {
  imageURL: String
  shortCode: String
  description: String
  owner: UserUpdateOneWithoutStudiesInput
}

input StudyUpdateWithoutSessionsInput {
  where: StudyWhereUniqueInput!
  data: StudyUpdateWithoutSessionsDataInput!
}

input StudyUpsertWithoutOwnerInput {
  where: StudyWhereUniqueInput!
  update: StudyUpdateWithoutOwnerDataInput!
  create: StudyCreateWithoutOwnerInput!
}

input StudyUpsertWithoutSessionsInput {
  where: StudyWhereUniqueInput!
  update: StudyUpdateWithoutSessionsDataInput!
  create: StudyCreateWithoutSessionsInput!
}

input StudyWhereInput {
  AND: [StudyWhereInput!]
  OR: [StudyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageURL: String
  imageURL_not: String
  imageURL_in: [String!]
  imageURL_not_in: [String!]
  imageURL_lt: String
  imageURL_lte: String
  imageURL_gt: String
  imageURL_gte: String
  imageURL_contains: String
  imageURL_not_contains: String
  imageURL_starts_with: String
  imageURL_not_starts_with: String
  imageURL_ends_with: String
  imageURL_not_ends_with: String
  shortCode: String
  shortCode_not: String
  shortCode_in: [String!]
  shortCode_not_in: [String!]
  shortCode_lt: String
  shortCode_lte: String
  shortCode_gt: String
  shortCode_gte: String
  shortCode_contains: String
  shortCode_not_contains: String
  shortCode_starts_with: String
  shortCode_not_starts_with: String
  shortCode_ends_with: String
  shortCode_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: UserWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
}

input StudyWhereUniqueInput {
  id: ID
  shortCode: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  study(where: StudySubscriptionWhereInput): StudySubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  sessionPoint(where: SessionPointSubscriptionWhereInput): SessionPointSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  studies: StudyCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutStudiesInput {
  create: UserCreateWithoutStudiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStudiesInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  studies: StudyUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutStudiesInput {
  create: UserCreateWithoutStudiesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutStudiesInput
  upsert: UserUpsertWithoutStudiesInput
}

input UserUpdateWithoutStudiesDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutStudiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudiesDataInput!
}

input UserUpsertWithoutStudiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudiesDataInput!
  create: UserCreateWithoutStudiesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  studies_every: StudyWhereInput
  studies_some: StudyWhereInput
  studies_none: StudyWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
